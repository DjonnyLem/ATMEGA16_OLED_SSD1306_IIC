###############################################################################
#                                                                             #
#                                                       21/Nov/2013  13:33:53 #
# IAR Atmel AVR C/C++ Compiler V5.11A/W32, Evaluation Version                 #
# Copyright 1996-2008 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  R:\MK_proj\avr_proj\IAR\DS1307-iar-3\twim.c              #
#    Command line =  R:\MK_proj\avr_proj\IAR\DS1307-iar-3\twim.c --cpu=m16    #
#                    -ms -o R:\MK_proj\avr_proj\IAR\DS1307-iar-3\Debug\Obj\   #
#                    -lCN R:\MK_proj\avr_proj\IAR\DS1307-iar-3\Debug\List\    #
#                    --initializers_in_flash -z6 --no_inline --no_cross_call  #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    5.0 Evaluation\avr\INC\" -I "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0                           #
#                    Evaluation\avr\INC\DLIB\" --eeprom_size 512              #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0                           #
#                    Evaluation\avr\LIB\DLIB\dlAVR-3s-ec_mul-sf-n.h"          #
#    List file    =  R:\MK_proj\avr_proj\IAR\DS1307-iar-3\Debug\List\twim.lst #
#    Object file  =  R:\MK_proj\avr_proj\IAR\DS1307-iar-3\Debug\Obj\twim.r90  #
#                                                                             #
#                                                                             #
###############################################################################

R:\MK_proj\avr_proj\IAR\DS1307-iar-3\twim.c
      1          //***************************************************************************
      2          //
      3          //  Author(s)...: Павел Бобков  http://ChipEnable.Ru   
      4          //
      5          //  Target(s)...: mega16
      6          //
      7          //  Compiler....: IAR
      8          //
      9          //  Description.: Драйвер ведущего TWI устройства. 
     10          //                Код основан на Atmel`овских доках - AVR315.
     11          //
     12          //  Data........: 13.11.13
     13          //
     14          //***************************************************************************
     15          #include "twim.h"

   \                                 In  segment ABSOLUTE, at 0x56
   \   <unnamed> volatile __io _A_TWCR
   \                     _A_TWCR:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   <unnamed> volatile __io _A_TWDR
   \                     _A_TWDR:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x21
   \   <unnamed> volatile __io _A_TWSR
   \                     _A_TWSR:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x20
   \   <unnamed> volatile __io _A_TWBR
   \                     _A_TWBR:
   \   00000000                      DS 1
     16          
     17          #define TWSR_MASK     0xfc  
     18          
     19          volatile static uint8_t twiBuf[TWI_BUFFER_SIZE];
     20          volatile static uint8_t twiState = TWI_NO_STATE;      
     21          volatile static uint8_t twiMsgSize;       
     22          
     23          /*предделители для установки скорости обмена twi модуля*/
     24          uint8_t pre[4] = {2, 8, 32, 128};
     25          
     26          /****************************************************************************
     27           Инициализация и установка частоты SCL сигнала
     28          ****************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     29          uint8_t TWI_MasterInit(uint16_t fr)
   \                     TWI_MasterInit:
     30          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     31            uint8_t i;
     32            uint16_t twbrValue;
     33            
     34            for(i = 0; i<4; i++){
   \   00000006   E080               LDI     R24, 0
   \   00000008   C001               RJMP    ??TWI_MasterInit_0
   \                     ??TWI_MasterInit_1:
   \   0000000A   9583               INC     R24
   \                     ??TWI_MasterInit_0:
   \   0000000C   3084               CPI     R24, 4
   \   0000000E   F518               BRCC    ??TWI_MasterInit_2
     35              twbrValue = ((((F_CPU)/1000UL)/fr)-16)/pre[i];
   \   00000010   01AD               MOVW    R21:R20, R27:R26
   \   00000012   E800               LDI     R16, 128
   \   00000014   E31E               LDI     R17, 62
   \   00000016   ........           CALL    ?US_DIVMOD_L02
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   5100               SUBI    R16, 16
   \   00000020   4010               SBCI    R17, 0
   \   00000022   4020               SBCI    R18, 0
   \   00000024   4030               SBCI    R19, 0
   \   00000026   E090               LDI     R25, 0
   \   00000028   01FC               MOVW    R31:R30, R25:R24
   \   0000002A   ....               SUBI    R30, LOW((-(pre) & 0xFFFF))
   \   0000002C   ....               SBCI    R31, (-(pre) & 0xFFFF) >> 8
   \   0000002E   8140               LD      R20, Z
   \   00000030   E050               LDI     R21, 0
   \   00000032   E060               LDI     R22, 0
   \   00000034   E070               LDI     R23, 0
   \   00000036   ........           CALL    ?UL_DIVMOD_L03
     36              if ((twbrValue > 0)&& (twbrValue < 256)){
   \   0000003A   2F20               MOV     R18, R16
   \   0000003C   2B21               OR      R18, R17
   \   0000003E   F329               BREQ    ??TWI_MasterInit_1
   \   00000040   3000               CPI     R16, 0
   \   00000042   E021               LDI     R18, 1
   \   00000044   0712               CPC     R17, R18
   \   00000046   F708               BRCC    ??TWI_MasterInit_1
     37                 TWBR = (uint8_t)twbrValue;
   \   00000048   B900               OUT     0x00, R16
     38                 TWSR = i;
   \   0000004A   B981               OUT     0x01, R24
     39                 TWDR = 0xFF;
   \   0000004C   B9E3               OUT     0x03, R30
     40                 TWCR = (1<<TWEN);
   \   0000004E   E004               LDI     R16, 4
   \   00000050   BF06               OUT     0x36, R16
     41                 return TWI_SUCCESS;
   \   00000052   EF0F               LDI     R16, 255
   \   00000054   C001               RJMP    ??TWI_MasterInit_3
     42              }
     43            }
     44            return 0;  
   \                     ??TWI_MasterInit_2:
   \   00000056   E000               LDI     R16, 0
   \                     ??TWI_MasterInit_3:
   \   00000058   E0E4               LDI     R30, 4
   \   0000005A   ........           JMP     ?EPILOGUE_B4_L09
   \   0000005E                      REQUIRE _A_TWCR
   \   0000005E                      REQUIRE _A_TWDR
   \   0000005E                      REQUIRE _A_TWSR
   \   0000005E                      REQUIRE _A_TWBR
     45          }    
     46          
     47          /****************************************************************************
     48           Проверка - не занят ли TWI модуль. Используется внутри модуля
     49          ****************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     50          static uint8_t TWI_TransceiverBusy(void)
   \                     TWI_TransceiverBusy:
     51          {
     52            return (TWCR & (1<<TWIE));                 
   \   00000000   B716               IN      R17, 0x36
   \   00000002   2F01               MOV     R16, R17
   \   00000004   7001               ANDI    R16, 0x01
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_TWCR
     53          }
     54          
     55          /****************************************************************************
     56           Взять статус TWI модуля
     57          ****************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     58          uint8_t TWI_GetState(void)
   \                     TWI_GetState:
   \                     ??TWI_GetState_0:
     59          {
     60            while (TWI_TransceiverBusy());             
   \   00000000   ....               RCALL   TWI_TransceiverBusy
   \   00000002   2300               TST     R16
   \   00000004   F7E9               BRNE    ??TWI_GetState_0
     61            return twiState;                        
   \   00000006   9100....           LDS     R16, (twiBuf + 8)
   \   0000000A   9508               RET
     62          }
     63          
     64          /****************************************************************************
     65           Передать сообщение msg из msgSize байтов на TWI шину
     66          ****************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     67          void TWI_SendData(uint8_t *msg, uint8_t msgSize)
   \                     TWI_SendData:
     68          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   2F82               MOV     R24, R18
     69            uint8_t i;
     70          
     71            while(TWI_TransceiverBusy());   //ждем, когда TWI модуль освободится             
   \                     ??TWI_SendData_0:
   \   00000008   ....               RCALL   TWI_TransceiverBusy
   \   0000000A   2300               TST     R16
   \   0000000C   F7E9               BRNE    ??TWI_SendData_0
     72          
     73            twiMsgSize = msgSize;           //сохряняем кол. байт для передачи             
   \   0000000E   9380....           STS     (twiBuf + 9), R24
     74            twiBuf[0]  = msg[0];            //и первый байт сообщения 
   \   00000012   01FD               MOVW    R31:R30, R27:R26
   \   00000014   8100               LD      R16, Z
   \   00000016   9300....           STS     twiBuf, R16
     75            
     76            if (!(msg[0] & (TRUE<<TWI_READ_BIT))){   //если первый байт типа SLA+W
   \   0000001A   910C               LD      R16, X
   \   0000001C   FD00               SBRC    R16, 0
   \   0000001E   C00E               RJMP    ??TWI_SendData_1
     77              for (i = 1; i < msgSize; i++){         //то сохряняем остальную часть сообщения
   \   00000020   E001               LDI     R16, 1
   \   00000022   C00A               RJMP    ??TWI_SendData_2
     78                twiBuf[i] = msg[i];
   \                     ??TWI_SendData_3:
   \   00000024   E010               LDI     R17, 0
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   0FE0               ADD     R30, R16
   \   0000002A   1FF1               ADC     R31, R17
   \   0000002C   8120               LD      R18, Z
   \   0000002E   01F8               MOVW    R31:R30, R17:R16
   \   00000030   ....               SUBI    R30, LOW((-(twiBuf) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(twiBuf) & 0xFFFF) >> 8
   \   00000034   8320               ST      Z, R18
     79              }
   \   00000036   9503               INC     R16
   \                     ??TWI_SendData_2:
   \   00000038   1708               CP      R16, R24
   \   0000003A   F3A0               BRCS    ??TWI_SendData_3
     80            }
     81                                 
     82            twiState = TWI_NO_STATE ;
   \                     ??TWI_SendData_1:
   \   0000003C   EF08               LDI     R16, 248
   \   0000003E   9300....           STS     (twiBuf + 8), R16
     83            TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWSTA); //разрешаем прерывание и формируем состояние старт                            
   \   00000042   EA05               LDI     R16, 165
   \   00000044   BF06               OUT     0x36, R16
     84          }
   \   00000046   E0E4               LDI     R30, 4
   \   00000048   ........           JMP     ?EPILOGUE_B4_L09
   \   0000004C                      REQUIRE _A_TWCR
     85          
     86          /****************************************************************************
     87           Переписать полученные данные в буфер msg в количестве msgSize байт. 
     88          ****************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     89          uint8_t TWI_GetData(uint8_t *msg, uint8_t msgSize)
   \                     TWI_GetData:
     90          {
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
     91            uint8_t i;
     92          
     93            while(TWI_TransceiverBusy());    //ждем, когда TWI модуль освободится 
   \                     ??TWI_GetData_0:
   \   00000008   ....               RCALL   TWI_TransceiverBusy
   \   0000000A   2300               TST     R16
   \   0000000C   F7E9               BRNE    ??TWI_GetData_0
     94          
     95            if(twiState == TWI_SUCCESS){     //если сообщение успешно принято,                         
   \   0000000E   9100....           LDS     R16, (twiBuf + 8)
   \   00000012   3F0F               CPI     R16, 255
   \   00000014   F471               BRNE    ??TWI_GetData_1
     96              for(i = 0; i < msgSize; i++){  //то переписываем его из внутреннего буфера в переданный
   \   00000016   E000               LDI     R16, 0
   \   00000018   C00A               RJMP    ??TWI_GetData_2
     97                msg[i] = twiBuf[i];
   \                     ??TWI_GetData_3:
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   ....               SUBI    R30, LOW((-(twiBuf) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(twiBuf) & 0xFFFF) >> 8
   \   00000022   8120               LD      R18, Z
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   0FE0               ADD     R30, R16
   \   00000028   1FF1               ADC     R31, R17
   \   0000002A   8320               ST      Z, R18
     98              }
   \   0000002C   9503               INC     R16
   \                     ??TWI_GetData_2:
   \   0000002E   170A               CP      R16, R26
   \   00000030   F3A0               BRCS    ??TWI_GetData_3
     99            }
    100            
    101            return twiState;                                   
   \                     ??TWI_GetData_1:
   \   00000032   9100....           LDS     R16, (twiBuf + 8)
   \   00000036   E0E3               LDI     R30, 3
   \   00000038   ........           JMP     ?EPILOGUE_B3_L09
    102          }
    103          
    104          /****************************************************************************
    105           Обработчик прерывания TWI модуля
    106          ****************************************************************************/
    107          #pragma vector=TWI_vect

   \                                 In  segment CODE, align 2, keep-with-next
    108          __interrupt void TWI_ISR(void)
   \                     TWI_ISR:
    109          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   933A               ST      -Y, R19
   \   0000000A   932A               ST      -Y, R18
   \   0000000C   931A               ST      -Y, R17
   \   0000000E   930A               ST      -Y, R16
   \   00000010   B73F               IN      R19, 0x3F
    110            static uint8_t ptr;
    111            uint8_t stat = TWSR & TWSR_MASK;
   \   00000012   B101               IN      R16, 0x01
   \   00000014   7F0C               ANDI    R16, 0xFC
    112            
    113            switch (stat){
   \   00000016   2F10               MOV     R17, R16
   \   00000018   5018               SUBI    R17, 8
   \   0000001A   F081               BREQ    ??TWI_ISR_0
   \   0000001C   5018               SUBI    R17, 8
   \   0000001E   F071               BREQ    ??TWI_ISR_0
   \   00000020   5018               SUBI    R17, 8
   \   00000022   F079               BREQ    ??TWI_ISR_1
   \   00000024   5110               SUBI    R17, 16
   \   00000026   F069               BREQ    ??TWI_ISR_1
   \   00000028   5110               SUBI    R17, 16
   \   0000002A   F409               BRNE    $+2+2
   \   0000002C   C047               RJMP    ??TWI_ISR_2
   \   0000002E   5018               SUBI    R17, 8
   \   00000030   F171               BREQ    ??TWI_ISR_3
   \   00000032   5110               SUBI    R17, 16
   \   00000034   F0F9               BREQ    ??TWI_ISR_4
   \   00000036   5018               SUBI    R17, 8
   \   00000038   F1C1               BREQ    ??TWI_ISR_5
   \   0000003A   C042               RJMP    ??TWI_ISR_6
    114              
    115              case TWI_START:                   // состояние START сформировано 
    116              case TWI_REP_START:               // состояние повторный START сформировано        
    117                 ptr = 0;      
   \                     ??TWI_ISR_0:
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   9300....           STS     (twiBuf + 10), R16
    118          
    119              case TWI_MTX_ADR_ACK:             // был передан пакет SLA+W и получено подтверждение
    120              case TWI_MTX_DATA_ACK:            // был передан байт данных и получено подтверждение  
    121                 if (ptr < twiMsgSize){
   \                     ??TWI_ISR_1:
   \   00000042   9100....           LDS     R16, (twiBuf + 10)
   \   00000046   9110....           LDS     R17, (twiBuf + 9)
   \   0000004A   1701               CP      R16, R17
   \   0000004C   F470               BRCC    ??TWI_ISR_7
    122                    TWDR = twiBuf[ptr];                    //загружаем в регистр данных следующий байт
   \   0000004E   E010               LDI     R17, 0
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   ....               SUBI    R30, LOW((-(twiBuf) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(twiBuf) & 0xFFFF) >> 8
   \   00000056   8100               LD      R16, Z
   \   00000058   B903               OUT     0x03, R16
    123                    TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT); //сбрасываем флаг TWINT    
   \   0000005A   E805               LDI     R16, 133
   \   0000005C   BF06               OUT     0x36, R16
    124                    ptr++;
   \   0000005E   ....               LDI     R30, LOW(twiBuf)
   \   00000060   ....               LDI     R31, (twiBuf) >> 8
   \   00000062   8502               LDD     R16, Z+10
   \   00000064   9503               INC     R16
   \   00000066   8702               STD     Z+10, R16
   \   00000068   C02F               RJMP    ??TWI_ISR_8
    125                 }
    126                 else{
    127                    twiState = TWI_SUCCESS;  
   \                     ??TWI_ISR_7:
   \   0000006A   EF0F               LDI     R16, 255
   \   0000006C   9300....           STS     (twiBuf + 8), R16
    128                    TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO)|(0<<TWIE); //формируем состояние СТОП, сбрасываем флаг, запрещаем прерывания
   \   00000070   E904               LDI     R16, 148
   \   00000072   C029               RJMP    ??TWI_ISR_9
    129                 }
    130                 break;
    131               
    132              case TWI_MRX_DATA_ACK:          //байт данных принят и передано подтверждение  
    133                 twiBuf[ptr] = TWDR;
   \                     ??TWI_ISR_4:
   \   00000074   B123               IN      R18, 0x03
   \   00000076   9100....           LDS     R16, (twiBuf + 10)
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(twiBuf) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(twiBuf) & 0xFFFF) >> 8
   \   00000082   8320               ST      Z, R18
    134                 ptr++;
   \   00000084   ....               LDI     R30, LOW(twiBuf)
   \   00000086   ....               LDI     R31, (twiBuf) >> 8
   \   00000088   8502               LDD     R16, Z+10
   \   0000008A   9503               INC     R16
   \   0000008C   8702               STD     Z+10, R16
    135              
    136              case TWI_MRX_ADR_ACK:           //был передан пакет SLA+R и получено подтвеждение  
    137                if (ptr < (twiMsgSize-1)){
   \                     ??TWI_ISR_3:
   \   0000008E   9100....           LDS     R16, (twiBuf + 10)
   \   00000092   E010               LDI     R17, 0
   \   00000094   9180....           LDS     R24, (twiBuf + 9)
   \   00000098   E090               LDI     R25, 0
   \   0000009A   9701               SBIW    R25:R24, 1
   \   0000009C   1708               CP      R16, R24
   \   0000009E   0719               CPC     R17, R25
   \   000000A0   F414               BRGE    ??TWI_ISR_10
    138                  TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);  //если это не предпоследний принятый байт, формируем подтверждение                             
   \   000000A2   EC05               LDI     R16, 197
   \   000000A4   C010               RJMP    ??TWI_ISR_9
    139                }
    140                else {
    141                  TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT);            //если приняли предпоследний байт, подтверждение не формируем
   \                     ??TWI_ISR_10:
   \   000000A6   E805               LDI     R16, 133
   \   000000A8   C00E               RJMP    ??TWI_ISR_9
    142                }    
    143                break; 
    144                
    145              case TWI_MRX_DATA_NACK:       //был принят байт данных без подтверждения      
    146                twiBuf[ptr] = TWDR;
   \                     ??TWI_ISR_5:
   \   000000AA   B123               IN      R18, 0x03
   \   000000AC   9100....           LDS     R16, (twiBuf + 10)
   \   000000B0   E010               LDI     R17, 0
   \   000000B2   01F8               MOVW    R31:R30, R17:R16
   \   000000B4   ....               SUBI    R30, LOW((-(twiBuf) & 0xFFFF))
   \   000000B6   ....               SBCI    R31, (-(twiBuf) & 0xFFFF) >> 8
   \   000000B8   8320               ST      Z, R18
    147                twiState = TWI_SUCCESS;  
   \   000000BA   CFD7               RJMP    ??TWI_ISR_7
    148                TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //формируем состояние стоп
    149                break; 
    150               
    151              case TWI_ARB_LOST:          //был потерян приоритет 
    152                TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWSTA); // сбрасываем флаг TWINT, формируем повторный СТАРТ
   \                     ??TWI_ISR_2:
   \   000000BC   EA05               LDI     R16, 165
   \   000000BE   C003               RJMP    ??TWI_ISR_9
    153                break;
    154                
    155              case TWI_MTX_ADR_NACK:      // был передан пает SLA+W и не получено подтверждение
    156              case TWI_MRX_ADR_NACK:      // был передан пакет SLA+R и не получено подтверждение    
    157              case TWI_MTX_DATA_NACK:     // был передан байт данных и не получено подтверждение
    158              case TWI_BUS_ERROR:         // ошибка на шине из-за некоректных состояний СТАРТ или СТОП
    159              default:     
    160                twiState = stat;                                                                                    
   \                     ??TWI_ISR_6:
   \   000000C0   9300....           STS     (twiBuf + 8), R16
    161                TWCR = (1<<TWEN)|(0<<TWIE)|(0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC); //запретить прерывание                              
   \   000000C4   E004               LDI     R16, 4
   \                     ??TWI_ISR_9:
   \   000000C6   BF06               OUT     0x36, R16
    162            }
    163          }
   \                     ??TWI_ISR_8:
   \   000000C8   BF3F               OUT     0x3F, R19
   \   000000CA   9109               LD      R16, Y+
   \   000000CC   9119               LD      R17, Y+
   \   000000CE   9129               LD      R18, Y+
   \   000000D0   9139               LD      R19, Y+
   \   000000D2   91E9               LD      R30, Y+
   \   000000D4   91F9               LD      R31, Y+
   \   000000D6   9189               LD      R24, Y+
   \   000000D8   9199               LD      R25, Y+
   \   000000DA   9518               RETI
   \   000000DC                      REQUIRE _A_TWCR
   \   000000DC                      REQUIRE _A_TWDR
   \   000000DC                      REQUIRE _A_TWSR

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     twiBuf:
   \   00000000                      DS 8
   \   00000008                      REQUIRE `?<Initializer for twiBuf>`
   \   00000008                      DS 1
   \   00000009                      REQUIRE `?<Initializer for twiState>`
   \   00000009                      DS 1
   \   0000000A                      REQUIRE `?<Initializer for twiMsgSize>`
   \   0000000A                      DS 1
   \   0000000B                      REQUIRE `?<Initializer for ptr>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     pre:
   \   00000000                      DS 4
   \   00000004                      REQUIRE `?<Initializer for pre>`

   \                                 In  segment INTVEC, offset 0x44, root
   \                     `??TWI_ISR??INTVEC 68`:
   \   00000044   ........           JMP     TWI_ISR

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for twiBuf>`:
   \   00000000   000000000000       DB 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for twiState>`:
   \   00000008   F8                 DB 248
   \                     `?<Initializer for twiMsgSize>`:
   \   00000009   00                 DB 0
   \                     `?<Initializer for ptr>`:
   \   0000000A   00                 DB 0

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for pre>`:
   \   00000000   08028020           DB 2, 8, 32, 128

   Maximum stack usage in bytes:

     Function                 CSTACK RSTACK
     --------                 ------ ------
     TWI_GetData                  3      2
       -> TWI_TransceiverBusy     3      2
     TWI_GetState                 0      2
       -> TWI_TransceiverBusy     0      2
     TWI_ISR                      8      2
     TWI_MasterInit               4      4
     TWI_SendData                 4      2
       -> TWI_TransceiverBusy     4      2
     TWI_TransceiverBusy          0      2


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _A_TWCR                      1
     _A_TWDR                      1
     _A_TWSR                      1
     _A_TWBR                      1
     TWI_MasterInit              94
     TWI_TransceiverBusy          8
     ??TWI_GetState_0            12
     TWI_SendData                76
     TWI_GetData                 60
     TWI_ISR                    220
     twiBuf                      11
     pre                          4
     ??TWI_ISR??INTVEC 68         4
     ?<Initializer for twiBuf>   11
     ?<Initializer for pre>       4
      Others                      6

 
   4 bytes in segment ABSOLUTE
 470 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
  15 bytes in segment NEAR_I
  15 bytes in segment NEAR_ID
 
 485 bytes of CODE memory (+ 10 bytes shared)
  15 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: none
